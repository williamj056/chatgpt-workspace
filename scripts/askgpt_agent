#!/usr/bin/env bash
# askgpt_agent â€” ChatGPT helper with per-project profile/memory/history (lightweight agent)
# Usage:
#   askgpt_agent -p project "question"
#   askgpt_agent -p project --history 5 "question with more context"
#   askgpt_agent -p project --memadd "Add this fact to memory.md"
#   askgpt_agent -p project --goaladd "New milestone"
#   askgpt_agent -f file.txt -p project "review this file with the profile"
# Env (optional):
#   MODEL=gpt-4o      TEMP=0.3

set -euo pipefail

SSD_ROOT="/mnt/ssd/ChatGPT"
LOG_DIR="$SSD_ROOT/logs"
PROJ_DIR="$SSD_ROOT/projects"
MODEL="${MODEL:-gpt-4o-mini}"
TEMP="${TEMP:-0.7}"
HISTORY=3
NO_LOG=""
FILEMODE=""
FILEPATH=""
PROJECT=""
MEMADD=""
GOALADD=""

# --- API key ---
if [ -f "$HOME/.openai_key" ]; then
  OPENAI_API_KEY="$(cat "$HOME/.openai_key")"
else
  echo "Error: ~/.openai_key not found (chmod 600)" >&2
  exit 1
fi

command -v jq >/dev/null 2>&1 || { echo "Install jq: sudo apt install -y jq" >&2; exit 1; }

mkdir -p "$LOG_DIR" "$PROJ_DIR" || { echo "Cannot create $LOG_DIR / $PROJ_DIR" >&2; exit 1; }

# --- Parse flags ---
while [ $# -gt 0 ]; do
  case "${1:-}" in
    -f) FILEMODE=1; FILEPATH="${2:-}"; [ -n "$FILEPATH" ] || { echo "-f needs a file" >&2; exit 1; }; shift 2;;
    -p|--project) PROJECT="${2:-}"; [ -n "$PROJECT" ] || { echo "-p needs a name" >&2; exit 1; }; shift 2;;
    --history) HISTORY="${2:-}"; shift 2;;
    --no-log) NO_LOG=1; shift;;
    --memadd) MEMADD="${2:-}"; [ -n "$MEMADD" ] || { echo "--memadd needs text" >&2; exit 1; }; shift 2;;
    --goaladd) GOALADD="${2:-}"; [ -n "$GOALADD" ] || { echo "--goaladd needs text" >&2; exit 1; }; shift 2;;
    --) shift; break;;
    -*) echo "Unknown option: $1" >&2; exit 1;;
    *) break;;
  esac
done

# --- Project folder / profile paths ---
P_DIR=""
if [ -n "$PROJECT" ]; then
  P_SLUG="$(echo "$PROJECT" | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g' | tr -cd '[:alnum:]_.-')"
  [ -z "$P_SLUG" ] && P_SLUG="project"
  P_DIR="$PROJ_DIR/$P_SLUG"
  mkdir -p "$P_DIR/profile" "$P_DIR/context"
fi

# --- Memory/Goal append if requested ---
if [ -n "$P_DIR" ]; then
  [ -n "$MEMADD" ] && { printf '%s\n' "$MEMADD" >> "$P_DIR/profile/memory.md"; echo "Appended to memory.md"; }
  [ -n "$GOALADD" ] && { printf '%s\n' "$GOALADD" >> "$P_DIR/profile/goals.md"; echo "Appended to goals.md"; }
fi

# --- Build user query ---
if [ -n "${FILEMODE:-}" ]; then
  [ -f "$FILEPATH" ] || { echo "File not found: $FILEPATH" >&2; exit 1; }
  QUERY="$(cat "$FILEPATH")"
  [ $# -gt 0 ] && QUERY="$QUERY"$'\n\n'"Additional context: $*"
else
  QUERY="${*:-}"
fi
[ -n "$QUERY" ] || { echo "Usage: askgpt_agent -p project \"question\"  (see header for more)" >&2; exit 1; }

# --- Load small profile docs if present ---
read_file() { [ -f "$1" ] && cat "$1" || true; }

SYSTEM_TEXT="$( [ -n "$P_DIR" ] && read_file "$P_DIR/profile/system.md")"
STYLE_TEXT="$(  [ -n "$P_DIR" ] && read_file "$P_DIR/profile/style.md")"
GOALS_TEXT="$(  [ -n "$P_DIR" ] && read_file "$P_DIR/profile/goals.md")"
MEM_TEXT="$(    [ -n "$P_DIR" ] && read_file "$P_DIR/profile/memory.md")"

# --- Load N recent project logs (capped per-file to keep payload small) ---
HIST_TEXT=""
if [ -n "$P_DIR" ] && [ "${HISTORY:-0}" -gt 0 ]; then
  RECENTS="$(ls -1t "$P_DIR"/*.md 2>/dev/null | head -n "$HISTORY" || true)"
  if [ -n "$RECENTS" ]; then
    while IFS= read -r f; do
      [ -f "$f" ] || continue
      PART="$(head -c 4000 "$f" 2>/dev/null || true)"
      HIST_TEXT="${HIST_TEXT}"$'\n\n'"[PAST LOG: $(basename "$f")]"$'\n'"${PART}"
    done <<EOF
$RECENTS
EOF
  fi
fi

# --- Compose messages: system/style/goals/memory/history, then user ----------
MESSAGES="$(jq -n \
  --arg sys   "$SYSTEM_TEXT" \
  --arg style "$STYLE_TEXT" \
  --arg goals "$GOALS_TEXT" \
  --arg mem   "$MEM_TEXT" \
  --arg hist  "$HIST_TEXT" \
  --arg q     "$QUERY" '
  [
    ( if ($sys   | length) > 0 then {role:"system", content:$sys} else empty end ),
    ( if ($style | length) > 0 then {role:"system", content:("STYLE:\n"          + $style)} else empty end ),
    ( if ($goals | length) > 0 then {role:"system", content:("GOALS:\n"          + $goals)} else empty end ),
    ( if ($mem   | length) > 0 then {role:"system", content:("MEMORY:\n"         + $mem)}   else empty end ),
    ( if ($hist  | length) > 0 then {role:"system", content:("RECENT CONTEXT:\n" + $hist)}  else empty end ),
    {role:"user", content:$q}
  ]
')"

PAYLOAD="$(jq -n --argjson msgs "$MESSAGES" --arg model "$MODEL" --argjson temp "$TEMP" '
  { model:$model, messages:$msgs, temperature:$temp }
')"

# --- Send request -------------------------------------------------------------
RESP="$(
  curl -sS -w '\n%{http_code}' \
    https://api.openai.com/v1/chat/completions \
    -H "Authorization: Bearer ${OPENAI_API_KEY}" \
    -H "Content-Type: application/json" \
    -d "$PAYLOAD"
)"

BODY="$(printf '%s' "$RESP" | sed '$d')"
CODE="$(printf '%s' "$RESP" | tail -n1)"
if [ "$CODE" -lt 200 ] || [ "$CODE" -ge 300 ]; then
  echo "HTTP error $CODE" >&2
  if echo "$BODY" | jq -e '.error' >/dev/null 2>&1; then
    echo "$BODY" | jq -r '.error.message' >&2
  else
    echo "$BODY" >&2
  fi
  exit 1
fi

CONTENT="$(echo "$BODY" | jq -r 'try .choices[0].message.content // empty')"
[ -n "$CONTENT" ] || { echo "Note: empty content; raw body:" >&2; echo "$BODY"; exit 0; }

# --- Print answer -------------------------------------------------------------
printf '%s\n' "$CONTENT"

# --- Logging (to SSD: main + project) ----------------------------------------
if [ -z "${NO_LOG:-}" ]; then
  mkdir -p "$LOG_DIR"
  TS="$(date +'%Y-%m-%d_%H-%M-%S')"
  FIRSTLINE="$(printf '%s' "$QUERY" | head -n1)"
  QSLUG="$(echo "$FIRSTLINE" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]._-' | tr ' ' '_' | cut -c1-60)"
  [ -z "$QSLUG" ] && QSLUG="chat"
  [ -n "$P_DIR" ] || P_DIR="$PROJ_DIR/misc"
  mkdir -p "$P_DIR"

  MAIN_LOG="$LOG_DIR/chat_${TS}_${QSLUG}.md"
  P_LOG="$P_DIR/${TS}_${QSLUG}.md"

  for TARGET in "$MAIN_LOG" "$P_LOG"; do
    {
      echo "## ðŸ•’ $(date)"
      [ -n "$PROJECT" ] && echo "**Project:** $PROJECT"
      [ -n "${FILEMODE:-}" ] && echo "**Input file:** $FILEPATH"
      echo
      [ -n "$SYSTEM_TEXT" ] && echo "**(system/style/goals/memory injected)**"
      echo "**Q:**"
      echo '```'
      printf '%s\n' "$QUERY"
      echo '```'
      echo
      echo "**A:**"
      echo
      printf '%s\n' "$CONTENT"
      echo
      echo '---'
    } >> "$TARGET"
  done

  echo "Saved main log â†’ $MAIN_LOG" >&2
  echo "Saved project log â†’ $P_LOG" >&2
fi
